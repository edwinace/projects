<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE urlrewrite PUBLIC 
	"-//tuckey.org//DTD UrlRewrite 3.2//EN"
	"http://tuckey.org/res/dtds/urlrewrite3.2.dtd">

<!--
	Configuration file for UrlRewriteFilter
	http://tuckey.org/urlrewrite/
-->
<!--
	[http://tuckey.org/urlrewrite/manual/3.0/]
	Tips 

    * When you want to put an "&" in a rule you must enter it as the XML entity "&amp;"
    * For simplicity you might want to start all from's with a ^ and end them with a $.
      In regular expressions ^ specifies the start of the string and $ specifies the end.
      ie, a request for /my/url/path will NOT match <from>^/url/$</from> 
      but it will match <from>/url/</from>
    * If using <outbound-rule> remember all urls in your code must be encoded 
      e.g. <a href="<%= response.encodeURL("/some/olddir/b.jsp") %>">my link</a>
    * Regular expressions are complex and a bit tricky at times, read regular 
      expression syntax for Java.
    * If you find regular expressions difficult use Wildcards.
    * "Context" is important. If you have an app with the context "/myapp" 
      and you request the url "/myapp/somefolder/somepage.jsp", the container 
      tells UrlRewriteFilter that the url is "/somefolder/somepage.jsp". 
      This can be confusing, but basically your rules and conditions 
      should not contain the context path (it will be handled by the container).
-->
<urlrewrite use-query-string="true">

	<!-- 
		/s/id/{shop.id}
		/s/id/{shop.id}/{shop.name}
	-->
	<rule>
		<from>^/s/id/([0-9]+)(/.*)?/?$</from>
		<to>/shop!view?id=$1</to>
	</rule>
	
	<!-- /s/{shop.urlName} -->
	<rule>
		<from>^/s/([a-zA-Z0-9-_]+)/?$</from>
		<to>/shop!view?urlName=$1</to>
	</rule>


<!-- =============================== Other ================================= -->

	
	
<!-- ========================== Outbound Rules ============================= -->

	<!-- 
		/some.action                     -> /some
		/some.action?param1=value&param2 -> /some?param1=value&param2
	-->
	<!--
	<outbound-rule>
		<from>^/(.*/)?([a-zA-Z0-9\-\_!;]+).action(\?.*)?$</from>
		<to>/$1$2$3</to>
	</outbound-rule>
	-->
	
	
<!-- ============================= Default ================================= -->
	
	<rule>
		<note>
			The rule means that requests to /test/status/ will be redirected to /rewrite-status
			the url will be rewritten.
		</note>
		<from>/test/status/</from>
		<to type="redirect">%{context-path}/rewrite-status</to>
	</rule>

	<outbound-rule>
		<note>
			The outbound-rule specifies that when response.encodeURL is called (if you are using JSTL c:url)
			the url /rewrite-status will be rewritten to /test/status/.

			The above rule and this outbound-rule means that end users should never see the
			url /rewrite-status only /test/status/ both in thier location bar and in hyperlinks
			in your pages.
		</note>
		<from>/rewrite-status</from>
		<to>/test/status/</to>
	</outbound-rule>

	<!--

	INSTALLATION

		in your web.xml add...

		<filter>
			<filter-name>UrlRewriteFilter</filter-name>
			<filter-class>org.tuckey.web.filters.urlrewrite.UrlRewriteFilter</filter-class>
			<init-param>
				<param-name>logLevel</param-name>
				<param-value>WARN</param-value>
			</init-param>
		</filter>
		<filter-mapping>
			<filter-name>UrlRewriteFilter</filter-name>
			<url-pattern>/*</url-pattern>
		</filter-mapping>

	 EXAMPLES

	 Redirect one url
		<rule>
			<from>/some/old/page.html</from>
			<to type="redirect">/very/new/page.html</to>
		</rule>

	Redirect a directory
		<rule>
			<from>/some/olddir/(.*)</from>
			<to type="redirect">/very/newdir/$1</to>
		</rule>

	Clean a url
		<rule>
			<from>/products/([0-9]+)</from>
			<to>/products/index.jsp?product_id=$1</to>
		</rule>
	eg, /products/1234 will be passed on to /products/index.jsp?product_id=1234 without the user noticing.

	Browser detection
		<rule>
			<condition name="user-agent">Mozilla/[1-4]</condition>
			<from>/some/page.html</from>
			<to>/some/page-for-old-browsers.html</to>
		</rule>
	eg, will pass the request for /some/page.html on to /some/page-for-old-browsers.html only for older
	browsers whose user agent srtings match Mozilla/1, Mozilla/2, Mozilla/3 or Mozilla/4.

	Centralised browser detection
		<rule>
			<condition name="user-agent">Mozilla/[1-4]</condition>
			<set type="request" name="browser">moz</set>
		</rule>
	eg, all requests will be checked against the condition and if matched
	request.setAttribute("browser", "moz") will be called.

	-->

</urlrewrite>
